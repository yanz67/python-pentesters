#!/usr/bin/env python3

import socket
import selectors

sel = selectors.DefaultSelector()


def init_server() -> socket:
    tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    tcp_socket.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
    port = 8004
    tcp_socket.setblocking(False)
    tcp_socket.bind(('0.0.0.0', port))
    tcp_socket.listen(10)
    print('Server started and waiting for connections')
    return tcp_socket


def accept(sock, mask):
    (conn, (ip, port)) = sock.accept()
    print(f'Accepted connection from {ip} om port {port}')
    conn.setblocking(False)
    sel.register(conn, selectors.EVENT_READ, read)


def read(conn, mask):
    data = conn.recv(256)
    if data:
        print(f'{data.decode("utf-8")}')
        conn.send(data)
    else:
        print(f'closing connection {conn}')
        sel.unregister(conn)
        conn.close()


if __name__ == '__main__':
    multiplexed_server = init_server()
    sel.register(multiplexed_server, selectors.EVENT_READ, accept)
    while True:
        events = sel.select()
        for key, mask in events:
            callback = key.data
            callback(key.fileobj, mask)
