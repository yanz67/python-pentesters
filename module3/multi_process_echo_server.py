#!/usr/bin/env python3
import sys
import signal
import socket
from multiprocessing import Process


class ProcessKiller(object):
    def __init__(self, action: callable, args: ()):
        signal.signal(signal.SIGINT, self._handler)
        self.action = action
        self.args = args

    def _handler(self, signo, stack_frame):
        if self.action is not None:
            self.action(*self.args)
            sys.exit(0)
        else:
            print('Action not defined')
            sys.exit(1)


def start_server(port: int):
    print(f'starting server on port {port}')
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind(('0.0.0.0', port))
    server_socket.listen()
    print('server is ready to accept connections')
    return server_socket


def process_connection(client_socket, client_address):
    print(f'client connected from: {client_address}')
    data = client_socket.recv(2048)
    while len(data):
        client_socket.send(data)
        data = client_socket.recv(2048)
    client_socket.close()


def shutdown_server(server_socket, connection_processes):
    print('shutting down the server')
    for proc in connection_processes:
        proc.terminate()
    server_socket.close()


if __name__ == '__main__':
    server = start_server(8002)
    connections = []
    ProcessKiller(shutdown_server, args=(server, connections))
    while True:
        (cl_socket, cl_address) = server.accept()
        connection_process = Process(target=process_connection, args=(cl_socket, cl_address))
        connection_process.start()
        connections.append(connection_process)
