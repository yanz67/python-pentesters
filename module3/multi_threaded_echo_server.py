#!/usr/bin/env python3
import signal
import socket
import sys
import threading


class ProcessKiller(object):
    def __init__(self, action: callable):
        self._action = action
        print('signal')
        signal.signal(signal.SIGINT, self._handler)

    def _handler(self, signo, stack_frame):
        if self._action is not None:
            self._action()
            sys.exit(0)
        else:
            print("Action is not defined")


class EchoServer:
    def __init__(self, port: int):
        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.server_socket.bind(('0.0.0.0', port))
        self.server_socket.listen()

    def start(self):
        print("starting server")
        while True:
            (client_socket, client_addr) = self.server_socket.accept()
            print('accepting')
            ct = threading.Thread(target=self.__process_connection__, args=(client_socket, client_addr,))
            ct.setDaemon(True)
            ct.start()
            print('connected')

    def stop(self):
        print("shutting down the server")
        self.server_socket.close()
        sys.exit(1)

    def __process_connection__(self, client_socket, client_address):
        print(f'connected with client: {client_address}')
        data = client_socket.recv(2048)
        while len(data):
            client_socket.send(data)
            data = client_socket.recv(2048)
        print("closing socket connection")
        client_socket.close()


if __name__ == '__main__':
    echo_server = EchoServer(8000)
    ProcessKiller(action=echo_server.stop)
    echo_server.start()
