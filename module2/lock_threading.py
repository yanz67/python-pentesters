#!/usr/bin/env python3

import threading
import queue
from time import sleep


class WorkersThread(threading.Thread):

    def __init__(self, worker_queue):
        threading.Thread.__init__(self)
        self.queue = worker_queue

    def run(self):
        while True:
            task_info = self.queue.get()
            thread_lock.acquire()
            print(f'working on thread: {task_info["thread_num"]}')
            sleep(1)
            print(f'exiting on thread: {task_info["thread_num"]}')
            thread_lock.release()
            self.queue.task_done()


my_queue = queue.Queue()
thread_lock = threading.Lock()
for i in range(10):
    print(f'creating thread: {i}')
    worker = WorkersThread(my_queue)
    worker.setDaemon(True)
    worker.start()
    print(f'worker: {i} created')

for i in range(10):
    my_queue.put({'thread_num': i})

my_queue.join()
